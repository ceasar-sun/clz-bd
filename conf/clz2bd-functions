####################################################
# Clonezilla2BD Project
#
# Name: clz2bd-functions
#
# Description: Define global sub functions at clz2bd environment
#
# Author:
#			Ceasar Sun <ceasar_at_nchc_org_tw>
####################################################

_LOAD_CLZ2BD_FUNCTIONS=y

# setup some parameters for color output. The variables should be already 
# defined in the /etc/init.d/functions in RH-like distribution 

[ -z "$SETCOLOR_SUCCESS" ] && SETCOLOR_SUCCESS="echo -en \\033[1;32m"
[ -z "$SETCOLOR_FAILURE" ] && SETCOLOR_FAILURE="echo -en \\033[1;31m"
[ -z "$SETCOLOR_WARNING" ] && SETCOLOR_WARNING="echo -en \\033[1;33m"
[ -z "$SETCOLOR_NORMAL"  ] && SETCOLOR_NORMAL="echo -en \\033[0;39m"

#############
### funcs ###
#############
check_if_root(){
	# check if root
	[ "$UID" != "0" ] && ( $SETCOLOR_WARNING; echo "Please use root privilege, ex: 'sudo $0'"; $SETCOLOR_NORMAL) &&	exit 1
}

check_drbl_requirement(){
	[ -z "$(which clonezilla 2>/dev/null)" ] && ($SETCOLOR_FAILURE; echo "CLZ2BD run under Conezilla SE environment. Exit !! "; $SETCOLOR_NORMAL ) && exit 1

	# Load DRBL setting and functions
	DRBL_SCRIPT_PATH="${DRBL_SCRIPT_PATH:-/usr/share/drbl}"
	. $DRBL_SCRIPT_PATH/sbin/drbl-conf-functions
	. /etc/drbl/drbl-ocs.conf
	. $DRBL_SCRIPT_PATH/sbin/ocs-functions
}

check_os_if_support(){

	# check OS if be supported : Ubuntut|Debian|LinuxMint
	echo "Check Linux distribution and version:"
	OS_Distr_ID="$(grep -E "^ID=" /etc/os-release| awk -F"=" '{print $2}')"
	if [ -n "$( grep -E "^ID=[debian|ubuntu]" /etc/os-release 2>/dev/null )" ]; then 
		OS_Type='DEB'
		OS_PKG_COMM="apt-get" 
	elif [  -n "$( grep -E "^ID=[centos]" /etc/os-release 2>/dev/null )"  ]; then
		OS_Type='RH'
		OS_PKG_COMM="yum" 
	fi
	OS_Release="$(grep -E "^PRETTY_NAME=" /etc/os-release| awk -F"=" '{print $2}')"
	_CLZ2BD_ARCH="$(uname -m)"
	[ -z "$(echo $OS_Distr_ID | grep -iE "$_CLZ2BD_SUPPORT_DISTRO")" ] && ($SETCOLOR_FAILURE; echo "Please prepare all necessary components first !!! "; $SETCOLOR_NORMAL ) && exit 1
	echo -n "Distribution:" ; $SETCOLOR_SUCCESS ; echo "$OS_Distr_ID" ; $SETCOLOR_NORMAL
	echo -n "Release:" ; $SETCOLOR_SUCCESS ; echo "$OS_Release" ; $SETCOLOR_NORMAL
	echo -n "Type:" ; $SETCOLOR_SUCCESS ; echo "$OS_Type" ; $SETCOLOR_NORMAL
}

check_system_env(){

	check_if_root;

	# check necessary package:
	echo "Check necessary packages:"
	$OS_PKG_COMM update && $OS_PKG_COMM -y install $_CLZ2BD_REQUIRE_PACKAGE

	# check hadoop related package:
	echo "Check hadoop related packagse:"
	[ -f "$_CLZ2BD_PKG_DIR/$_PKG_HADOOP" ] && ( _INST_HADOOP=y; echo "$_PKG_HADOOP : ready")|| ($SETCOLOR_FAILURE; echo "$_PKG_HADOOP not found ! Exit .. ";$SETCOLOR_NORMAL;  exit 1)
	[ "$_INST_HBASE" = "y" -a -f "$_CLZ2BD_PKG_DIR/$_PKG_HBASE" ] && ( _INST_HBASE=y; echo "$_PKG_HBASE : ready") || (echo "HBase : skip") 
	[ "$_INST_ZOOKEEPER" = "y" -a -f "$_CLZ2BD_PKG_DIR/$_PKG_ZOOKEEPER" ] && ( _INST_ZOOKEEPER=y;echo "$_PKG_ZOOKEEPER : ready" ) || (echo "ZOOKEEPER : skip") 
	[ "$_INST_SPARK" = "y" -a -f "$_CLZ2BD_PKG_DIR/$_PKG_SPARK" ] && ( _INST_HBASE=y;echo "$_PKG_HBASE : ready") || (echo "SPARK : skip") 
	[ "$_INST_HIVE" = "y" -a -f "$_CLZ2BD_PKG_DIR/$_PKG_HIVE" ] && ( _INST_HIVE=y;echo "$_PKG_HIVE : ready") || (echo "HIVE : skip")

	[ ! -f "$_CLZ2BD_PKG_DIR/$_PKG_JAVA" ] && _USE_OPENJDK=y 

	# add "StrictHostKeyChecking no" into /etc/ssh/ssh_config
	echo "Add 'StrictHostKeyChecking no' into /etc/ssh/ssh_config:"
	[ ! -f "/etc/ssh/ssh_config" ] && ( $SETCOLOR_FAILURE; echo "/etc/ssh/ssh_config not exist ! Exit .. ";$SETCOLOR_NORMAL;  exit 1) || cp /etc/ssh/ssh_config /etc/ssh/ssh_config.clz2bd-bak
	sed -i -e '/StrictHostKeyChecking/d' /etc/ssh/ssh_config
	echo  "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
	[ "$?"  = "0" ] && ( $SETCOLOR_SUCCESS; echo "done."; $SETCOLOR_NORMAL)

	# create user and group for hadoop
	$SETCOLOR_WARNING; echo "Create group: $_HD_GROUP and user:$_HD_USER ..."; $SETCOLOR_NORMAL
	[ -z "$(grep -E "^$_HD_GROUP:" /etc/group 2>/dev/null)" ] && groupadd $_HD_GROUP
	[ -z "$(id -u $_HD_USER 2>/dev/null)" ] && adduser --disabled-password  --gecos "hadoop user(created by clz2bd)" --ingroup $_HD_GROUP $_HD_USER
	echo "Copy ssh public key pairs : '${_HD_SSHKEY}*' ... "
	mkdir -p /home/$_HD_USER/.ssh ; cp $_HD_SSHKEY* /home/$_HD_USER/.ssh/
	cp ${_HD_SSHKEY}.pub /home/$_HD_USER/.ssh/authorized_keys ; chown -R $_HD_USER:$_HD_GROUP /home/$_HD_USER
}

do_prepare_network(){
	
	declare MAC_reg='[[:xdigit:]]{2}\:[[:xdigit:]]{2}\:[[:xdigit:]]{2}\:[[:xdigit:]]{2}\:[[:xdigit:]]{2}\:[[:xdigit:]]{2}'
	declare IP_reg='[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}'

	echo "Get network information ..." 
	[ "$(ls $_CLZ2BD_PKG_DIR 2>/dev/null | wc -l )" = "0" -a -z "$(ip route)" ] && ( $SETCOLOR_FAILURE; echo "The follows need network connect, so we start it... " ; $SETCOLOR_NORMAL; ocs-live-netcfg )

	_HD_NW_GEATWAY="$(ip route | awk "/^default via/ {print \$3}")"
	_gateway_dev="$(ip route | awk "/^default via/ {print \$5}")"
	_HD_NW_NETWORK="$(route -n | grep $_gateway_dev | grep -v $_HD_NW_GEATWAY | awk -F " " '{print $1}')"
	_HD_NW_NETMASK="$(route -n | grep $_gateway_dev | grep -v $_HD_NW_GEATWAY | awk -F " " '{print $3}')"
	[ -f "/etc/resolv.conf" ] && _HD_NW_DNS="$(awk '/^nameserver/{printf "%s ",$2}' /etc/resolv.conf)"
	[ -z "$_HD_NW_DNS" ] && $_HD_NW_DNS=$_HD_NW_DNS_DEF

	[ -f "/etc/dhcp/dhcpd.conf" ] && ( grep "hardware ethernet " /etc/dhcp/dhcpd.conf | awk -F " " '{print $3}'| sed -s 's|;||g' > $_HD_MACLIST )
	[ -f "$_HD_MACLIST" ] && mac_amount="$(cat $_HD_MACLIST | wc -l )" || mac_amount=0
	if [ $mac_amount -gt 0 ] ; then
		read -p "Find available mac list from dhcpd service, use it:[Y/n]" _answer
		[ -n "$(echo $_answer | grep -iE 'n|N')" ] && mac_amount=0
	fi

	# Parse command-line options
	while [ $mac_amount -lt 1 ]; do
		$SETCOLOR_WARNING
		#echo "At least 1 mac address is necessary for this Hadoop cluster. "
		echo "Please input fullpath for mac-ip pairs file, see sample: '$_CLZ2BD_ROOT_DIR/conf/mac-list.sample.txt'.[Ctrl+C] to exit."
		read _answer
		$SETCOLOR_NORMAL

		[ ! -f "$_answer" ] && echo "File:'$_answer' not exist ?" && continue;
		mac_amount="$(grep -E "^$MAC_reg" $_answer | wc -l )"
		[ $mac_amount -gt 0 ] && cp $_answer $_HD_MACLIST
	done

	max_ip_capability="$(ipcalc $_HD_NW_NETWORK/$_HD_NW_NETMASK | grep "^Hosts/Net"| awk -F " " '{print $2}')"
	if [  $max_ip_capability -lt $mac_amount ] ; then 
		if [  $mac_amount -gt 65534 ] ; then
			_HD_NW_NETWORK=10.0.0.0 ;
			_HD_NW_NETMASK=255.0.0.0
		elif [ $mac_amount -gt 253 ] ; then 
			_HD_NW_NETWORK=172.16.0.0 ;
			_HD_NW_NETMASK=255.255.0.0
		else
			_HD_NW_NETWORK=192.168.1.0 ;
			_HD_NW_NETMASK=255.255.255.0
		fi
	fi

	#_okay=n
	#while [ "$_okay" != "y" ]; do
	$SETCOLOR_WARNING; read -p "Network :[$_HD_NW_NETWORK]" _answer ; $SETCOLOR_NORMAL;
	[ -n "$_answer" ] && _HD_NW_NETWORK=$_answer
	$SETCOLOR_WARNING; read -p "Netmask :[$_HD_NW_NETMASK]" _answer ; $SETCOLOR_NORMAL; 
	[ -n "$_answer" ] && _HD_NW_NETMASK=$_answer

	_HD_NW_GATEWAY="$(ipcalc $_HD_NW_NETWORK/$_HD_NW_NETMASK | grep '^HostMax:' | awk -F " " '{print $2}')"
	_HD_NW_START_IP="$(ipcalc $_HD_NW_NETWORK/$_HD_NW_NETMASK | grep '^HostMin:' | awk -F " " '{print $2}')"
	_HD_NW_BROADCAST_IP="$(ipcalc $_HD_NW_NETWORK/$_HD_NW_NETMASK | grep '^Broadcast:' | awk -F " " '{print $2}')"

	$SETCOLOR_WARNING; read -p  "Gateway :[$_HD_NW_GATEWAY] " _answer; $SETCOLOR_NORMAL 
	[ -n "$_answer" ] && _HD_NW_GATEWAY=$_answer
	$SETCOLOR_WARNING; read -p "Start IP (also be master) :[$_HD_NW_START_IP] " _answer; $SETCOLOR_NORMAL
	[ -n "$_answer" ] && _HD_NW_START_IP=$_answer 

	declare -i count=0
	[ -f "$_CLZ2BD_ROOT_DIR/conf/mac-ip-hostname.lst" ] && (mv $_CLZ2BD_ROOT_DIR/conf/mac-ip-hostname.lst $_CLZ2BD_ROOT_DIR/conf/mac-ip-hostname.lst.bak )  
	touch $_CLZ2BD_ROOT_DIR/conf/mac-ip-hostname.lst
	while read _this_mac ; do
		[ $count -eq 0 ] && _node_name="$_HD_NAME_MASTER" || _node_name="${_HD_NAME_SLAVE_PREFIX}-$count"
		bin_start_ip="$(ipcalc $_HD_NW_START_IP  | grep Address: | awk -F" " '{print $3 $4 }'| sed -e "s/\.//g")"
		dec_start_ip=$(echo "ibase=2; obase=A; $bin_start_ip" | bc)
		dec_this_ip=$(expr $dec_start_ip + $count)
		bin_this_ip=$(echo "ibase=A; obase=2; $dec_this_ip" | bc)
		_this_ip="$(echo "ibase=2; obase=A; ${bin_this_ip:0:8}" | bc )"."$(echo "ibase=2; obase=A; ${bin_this_ip:8:8}" | bc )"."$(echo "ibase=2; obase=A; ${bin_this_ip:16:8}" | bc )"."$(echo "ibase=2; obase=A; ${bin_this_ip:24:8}" | bc )"
      echo "$_this_mac;$_this_ip;$_node_name" >> $_CLZ2BD_ROOT_DIR/conf/mac-ip-hostname.lst
		count=count+1
	done < $_HD_MACLIST
	$SETCOLOR_WARNING;
	echo "Total $count nodes."
	echo "Last IP:[$_this_ip]"
	echo "Read '$_CLZ2BD_ROOT_DIR/conf/mac-ip-hostname.lst' for detail." 
	$SETCOLOR_NORMAL;

	cat >> $_CLZ2BD_ROOT_DIR/conf/clz2bd-custom.conf << EOF

# === generated by deploy-bd prepare mmode : do_prepare_network()===

_HD_NW_NETWORK=$_HD_NW_NETWORK
_HD_NW_NETMASK=$_HD_NW_NETMASK
_HD_NW_GATEWAY=$_HD_NW_GATEWAY
_HD_NW_BROADCAST_IP=$_HD_NW_BROADCAST_IP
_HD_NW_DNS="$_HD_NW_DNS"
_HD_MAC_IP_NAME_CONF=\$_CLZ2BD_ROOT_DIR/conf/mac-ip-hostname.lst

EOF

}
	
do_prepare_pkg(){

	echo "Start to check pkg status ..." 
	[ -d "$_CLZ2BD_PKG_DIR" ] || mkdir -p $_CLZ2BD_PKG_DIR
	wget -q $_PKG_RELEASE -O $_CLZ2BD_PKG_DIR/Release

	_PKG_HADOOP_MD5=$(grep "^hadoop" $_CLZ2BD_PKG_DIR/Release | awk -F " " '{print $3}')
	_PKG_HADOOP_URL=$(grep "^hadoop" $_CLZ2BD_PKG_DIR/Release | awk -F " " '{print $2}')
	_PKG_HADOOP="${_PKG_HADOOP_URL##*/}"
	[ -f "$_CLZ2BD_PKG_DIR/$_PKG_HADOOP" ] && _PKG_HADOOP_MD5_CHK=$(md5sum $_CLZ2BD_PKG_DIR/$_PKG_HADOOP | awk '{print $1}')
	[ "$_PKG_HADOOP_MD5_CHK" = "$_PKG_HADOOP_MD5"  ] || wget -q $_PKG_HADOOP_URL -O $_CLZ2BD_PKG_DIR/$_PKG_HADOOP
	echo "Hadoop : $_PKG_HADOOP is ready... "

	_PKG_JAVA_LIST=$(find $_CLZ2BD_PKG_DIR -name "jdk*" | sort)
	if [ -z "$_PKG_JAVA_LIST" ] ; then
		$SETCOLOR_WARNING; read -p "Use openjdk ? Give full path to use JDK package file. [n] to don't deal with Java. [Y/n/full-Path] " _answer; $SETCOLOR_NORMAL
		if [ -n "$(echo $_answer | grep -E "n|N")" ] ; then 
			_PKG_JAVA=
		elif [ -f "$_answer" ] ; then
			cp $_answer $_CLZ2BD_PKG_DIR/
			_PKG_JAVA=${tmp_java_pkg##*/}
		else
			_PKG_JAVA=$_PKG_JAVA_SYS_ALT
		fi
	elif [ "$(echo $_PKG_JAVA_LIST | wc -w)" -gt 1 ] ; then
		$SETCOLOR_WARNING; echo " Select which Java pkg to install :" $SETCOLOR_NORMAL; 
		count=0
		for jpkg in $_PKG_JAVA_LIST ; do 
			j_arr[$count]=$jpkg
			echo [$count] $jpkg
			count=$(expr $count + 1)
		done
		read -p [$count] _answer
		if [ "$_answer" -ge 0 -a "$_answer" -le "$count" ]; then
			_PKG_JAVA="${j_arr[$_answer]}"
		else
			_PKG_JAVA="${j_arr[$_count]}"
		fi
	else
		_PKG_JAVA="${_PKG_JAVA_LIST##*/}"
	fi

	cat >> $_CLZ2BD_ROOT_DIR/conf/clz2bd-custom.conf << EOF

# === generated by deploy-bd prepare mmode : do_prepare_pkg()===

_PKG_HADOOP=$_PKG_HADOOP
_PKG_JAVA=$_PKG_JAVA

EOF

}

do_prepare_sshkey(){

	echo "Generate ssk key for hadoop environment ..."
	[ -f $_HD_SSHKEY -o -f ${_HD_SSHKEY}.pub ] && rm -rf ${_HD_SSHKEY}*
	yes | ssh-keygen -q -N "" -b 2048 -t rsa -f $_HD_SSHKEY
	echo "Creatre key pairs : '$_HD_SSHKEY' , '${_HD_SSHKEY}.pub'"

}

search_target_dev(){

	echo "Search possible target device :"
	[ -d "$_HD_DEPLOY_MOUNT_POINT" ] || mkdir $_HD_DEPLOY_MOUNT_POINT
	dev_list="$(blkid | awk -F ":" ' $1 ~ /^\/dev\/(sd[a-z]+[[:digit:]]+|cciss|mapper)/ {print $1}' )"
	for dev in $dev_list ; do
		echo -n "check $dev ..."
		dev_fs=$(LC_ALL=C ocs-get-part-info "$dev"  filesystem 2>/dev/null)
		[ -n "$(echo $dev_fs | grep -iE 'ntfs|vfat|swap|ufs|hfs|vmfs|lvm2' )" ] && echo "not support FS: $dev_fs" && continue;
		mount -o ro $dev $_HD_DEPLOY_MOUNT_POINT ; [ "$?" -ne "0" ] && echo "mount failed !" && continue;
		if [ -f "$_HD_DEPLOY_MOUNT_POINT/etc/fstab" ] ; then 
			_HD_DEPLOY_DEV=$dev
			umount $_HD_DEPLOY_MOUNT_POINT
			$SETCOLOR_SUCCESS ; echo "yes"; $SETCOLOR_NORMAL; break;
		else
			umount $_HD_DEPLOY_MOUNT_POINT
			echo "not '/' root point. Skip " && continue;
		fi
	done

}

install_pkg(){
	
	$SETCOLOR_WARNING; echo "Install necessary package ..."; $SETCOLOR_NORMAL

	echo "Install $_PKG_HADOOP to $_PKG_INST_ROOT ..."
	[ ! -d "$_PKG_INST_ROOT" ] && mkdir -p $_PKG_INST_ROOT
	[ -d "$_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR" ] && (echo "mv $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR to $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR.bak" ; mv $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR.bak )
	_unpack_folder_name="$(tar tzf $_CLZ2BD_PKG_DIR/$_PKG_HADOOP | head -1 | sed -e 's/\/.*//')"
	tar xzf $_CLZ2BD_PKG_DIR/$_PKG_HADOOP -C $_PKG_INST_ROOT
	chown -R $_HD_USER:$_HD_GROUP $_PKG_INST_ROOT/$_unpack_folder_name
	ln -s $_unpack_folder_name $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR
	
	echo "Create Hadoop TMP dir :'$_PKG_INST_ROOT/$_PKG_INST_HADOOP_TMP' ... "
	[  -e "$_PKG_INST_ROOT/$_PKG_INST_HADOOP_TMP" ] && mv $_PKG_INST_ROOT/$_PKG_INST_HADOOP_TMP $_PKG_INST_ROOT/${_PKG_INST_HADOOP_TMP}.bak
	mkdir $_PKG_INST_ROOT/$_PKG_INST_HADOOP_TMP
	chown -R $_HD_USER:$_HD_GROUP $_PKG_INST_ROOT/$_PKG_INST_HADOOP_TMP
	echo "done"


	if [ -z "$_PKG_JAVA" ]; then
		echo "Skip JAVA installation."
	elif [ -f "$_CLZ2BD_PKG_DIR/$_PKG_JAVA" ]; then
		# Install prepared jdk package
		echo -n "Install $_PKG_JAVA to $_PKG_INST_ROOT ..."
		[ -d "$_PKG_INST_ROOT/$_PKG_INST_JAVA_DIR" ] && (echo "mv $_PKG_INST_ROOT/$_PKG_INST_JAVA_DIR to $_PKG_INST_ROOT/$_PKG_INST_JAVA_DIR.bak" ; mv $_PKG_INST_ROOT/$_PKG_INST_JAVA_DIR $_PKG_INST_ROOT/$_PKG_INST_JAVA_DIR.bak )
		_unpack_folder_name="$(tar tzf $_CLZ2BD_PKG_DIR/$_PKG_JAVA | head -1 | sed -e 's/\/.*//')"
		tar xzf $_CLZ2BD_PKG_DIR/$_PKG_JAVA -C $_PKG_INST_ROOT
		chown -R root:root $_PKG_INST_ROOT/$_unpack_folder_name
		ln -s $_unpack_folder_name $_PKG_INST_ROOT/$_PKG_INST_JAVA_DIR
		_HOMEPATH_JAVA=$_PKG_INST_ROOT/$_PKG_INST_JAVA_DIR
		echo "done"
	else
		# install openjdk
		echo "Install $_PKG_JAVA ..."
		export DEBIAN_FRONTEND=noninteractive ; $OS_PKG_COMM -y install $_PKG_JAVA
		[ -n "$(dpkg -l | grep $_PKG_JAVA | head -n 1 | awk '{print $2 }'| grep -E ':amd64$')" ] && _HOMEPATH_JAVA="$_HOMEPATH_JAVA_x86_64" || _HOMEPATH_JAVA="$_HOMEPATH_JAVA_i686"
	fi
}
config_system_env(){

	local _this_mac
	local _this_if
	local _this_ip
	local _this_hostname
	local _if_belone_cluster


	_this_mac="$(ifconfig -a | grep HWaddr | head -n 1 | awk -F " " '{print $5}')"
	_this_if="$(ifconfig -a | grep HWaddr | head -n 1 | awk -F " " '{print $1}')"

	for _this_if in `ls /sys/class/net/` ; do 
		[ "$i" == "lo" ] && continue; 
		_this_mac="$(cat /sys/class/net/${_this_if}/address)"
		_this_ip="$(grep -i $_this_mac $_HD_MAC_IP_NAME_CONF | awk -F ";" '{ print $2 }' )"
		_this_hostname="$(grep -i $_this_mac $_HD_MAC_IP_NAME_CONF | awk -F ";" '{ print $3 }' )"
		[ -z "$_this_ip" ] && continue || _if_belone_cluster=1 ;

		echo "Set hostname as : $_this_hostname "
		echo "$_this_hostname" > /etc/hostname

		echo "Set /etc/hosts : "
		echo "# Generate via clz2bd" >> /etc/hosts
		awk -F ";" '$3 ~/'$_HD_NAME_MASTER'/  {print $2 "\t"$3}' $_HD_MAC_IP_NAME_CONF >> /etc/hosts
		_HD_SLAVE_LIST="$(awk -F ";" '{print $3}' $_HD_MAC_IP_NAME_CONF | grep "^slave-")"
		cp /etc/hosts /etc/hosts.bak 
		sed -i -s "s/^127.0.1.1/#127.0.1.1/g" /etc/hosts
		for slave in $_HD_SLAVE_LIST ; do 
			s_ip=$(grep $slave $_HD_MAC_IP_NAME_CONF | awk -F ";" '{print $2}')
			sed -i -s "/^$s_ip[[:space:]]/d" /etc/hosts
			echo "$s_ip	$slave" >> /etc/hosts
		done

		echo "Generate /etc/network/interfaces : $_this_ip in $_this_mac"
		cat > /etc/network/interfaces << EOF
# Generate by clz2bd
auto lo
iface lo inet loopback

auto $_this_if
iface $_this_if inet static
        address $_this_ip
        netmask ${_HD_NW_NETMASK}
        network ${_HD_NW_NETWORK}
        broadcast ${_HD_NW_BROADCAST_IP}
        gateway ${_HD_NW_GATEWAY}
        dns-nameservers $_HD_NW_DNS

EOF
		# doen for thos node
		break;

	done

	[ -z "$_if_belone_cluster" ] && (SETCOLOR_FAILURE; echo "This machine not belone to CLZ-BD cluster ! Exit .. ";$SETCOLOR_NORMAL;  exit 1)
	

	echo "set 'HADOOP_HOME=$_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR' into profile ..."
	[ -e "/etc/profile" ] && cp /etc/profile /etc/profile.clz2bd.bak
	sed -i -e '/\/etc\/clz2bd.profile/d' /etc/profile && echo  ". /etc/clz2bd.profile" >> /etc/profile	

	[ -e "/etc/clz2bd.profile" ] && mv  /etc/clz2bd.profile /etc/clz2bd.profile.bak
	cat > /etc/clz2bd.profile << EOF
export JAVA_HOME=$_HOMEPATH_JAVA
export HADOOP_HOME=$_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR
export HADOOP_MAPRED_HOME=\$HADOOP_HOME
export HADOOP_COMMON_HOME=\$HADOOP_HOME
export HADOOP_HDFS_HOME=\$HADOOP_HOME
export HADOOP_CONF_DIR=\$HADOOP_HOME/etc/hadoop

export YARN_HOME=\$HADOOP_HOME
export YARN_CONF_DIR=\$HADOOP_HOME/etc/hadoop

export PATH=\$PATH:\${JAVA_HOME}/bin:\$HADOOP_HOME/bin:\$HADOOP_HOME/sbin
EOF

}

tune_nic_id(){
	echo "Adjust network device ID ...";

	local _this_mac
	local _this_if
	local _expected_ip
	local _current_ip

	local _if_belone_cluster

	for _this_if in `ls /sys/class/net/` ; do 
		[ "$i" == "lo" ] && continue; 
		_this_mac="$(cat /sys/class/net/${_this_if}/address)"
		_expected_ip="$(grep -i $_this_mac $_HD_MAC_IP_NAME_CONF | awk -F ";" '{ print $2 }' | sed -e 's/\.0*/\./g')"
		_current_ip="$(ip addr show $_this_if  | grep -E '^[[:space:]]+inet[[:space:]]' | awk '{print $2}' | awk -F "/" '{print $1}')"

		if [ -z "$_expected_ip" ] ; then
			# not configuration for this mac
			continue
		elif [ "$_expected_ip" = "$_current_ip" ] ; then 
			# this NIC is correct			
			continue
		else
			if [ "$OS_Type" = 'DEB' ] ; then
				_orig_nic_id="$(tac /etc/network/interfaces | grep -A 3 "$_expected_ip[[:space:]]*$"  | grep 'iface' | head -n 1 | awk '{print $2}')"
			elif [ "$OS_Type" = 'RH' ] ; then
				echo "RH type: skip ..."
			fi

			ifdown $_this_if 
			ifconfig $_this_if down

			ifdown $_orig_nic_id
			ifconfig $_orig_nic_id down

			if [ -z "$_orig_nic_id"  ] ; then 
				if [ "$OS_Type" = 'DEB' ] ; then
					cat >> /etc/network/interfaces << EOF
# Generate by tune_nic_id
auto $_this_if
iface $_this_if inet static
        address $_expected_ip
        netmask ${_HD_NW_NETMASK}
        network ${_HD_NW_NETWORK}
        broadcast ${_HD_NW_BROADCAST_IP}
        gateway ${_HD_NW_GATEWAY}
        dns-nameservers $_HD_NW_DNS
EOF
				elif [ "$OS_Type" = 'RH' ]; then
					echo "RH type: skip ..."
				fi

			else
				# replace device ID
				if [ "$OS_Type" = 'DEB' ] ; then
					cp /etc/network/interfaces /etc/network/interfaces.clz-tune.bak
					sed -i -e "s/$_orig_nic_id/$_this_if/g" /etc/network/interfaces
				elif [ "$OS_Type" = 'RH' ]; then
					echo "RH type: skip ..."
				fi
			fi

			ifup $_this_if
			ifconfig $_this_if up
			ifup $_orig_nic_id
			ifconfig $_orig_nic_id up
		fi
	done
}

tune_hd_service_trigger(){

	if [ "$(cat /etc/hostname)" = "$_HD_NAME_MASTER" ] ; then
		${_PKG_INST_ROOT}/${_CLZ2BD_PNAME}/sbin/clz-bd.ser --format
		#${_PKG_INST_ROOT}/${_CLZ2BD_PNAME}/sbin/clz-bd.ser dfs --start
		#${_PKG_INST_ROOT}/${_CLZ2BD_PNAME}/sbin/clz-bd.ser yarn --start
	fi	

}

config_hadoop_env(){

	cat >> $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/libexec/hadoop-config.sh << EOF
export JAVA_HOME=$_HOMEPATH_JAVA
EOF
	cat >> $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/hadoop-env.sh << EOF
#Add for JDK
export JAVA_HOME=$_HOMEPATH_JAVA
EOF

	echo "generate slave file..."
	
	if [ "$(echo $_HD_SLAVE_LIST | wc -w)" = "0" ] ; then 
		echo localhost > $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/slaves
	else
		[ -f "$_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/slaves" ] && mv $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/slaves $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/slaves.bak
		touch $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/slaves
		for slave in $_HD_SLAVE_LIST; do
			echo $slave >> $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/slaves 
		done
	fi

	cat > $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/core-site.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>
  <property>
    <name>fs.default.name</name>
    <value>hdfs://$_HD_NAME_MASTER:9000</value>
  </property>  
  <property>
    <name>hadoop.tmp.dir</name>
    <value>$_PKG_INST_ROOT/$_PKG_INST_HADOOP_TMP</value>
  </property>
</configuration>
EOF

	cat > $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/hdfs-site.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>
  <property>
    <name>dfs.replication</name>
    <value>2</value>
  </property>  
  <property>
    <name>dfs.permissions</name>
    <value>false</value>
  </property>
</configuration>
EOF

	cat > $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/mapred-site.xml << EOF
<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>
  <property>
    <name>mapreduce.framework.name</name>
    <value>yarn</value>
  </property>
</configuration>
EOF

cat > $_PKG_INST_ROOT/$_PKG_INST_HADOOP_DIR/etc/hadoop/yarn-site.xml << EOF
<?xml version="1.0"?>
<configuration>
<property>
<name>yarn.resourcemanager.scheduler.address</name>
<value>$_HD_NAME_MASTER:8030</value>
</property>
<property>
<name>yarn.resourcemanager.resource-tracker.address</name>
<value>$_HD_NAME_MASTER:8031</value>
</property>
<property>
<name>yarn.resourcemanager.address</name>
<value>$_HD_NAME_MASTER:8032</value>
</property>
<property>
<name>yarn.nodemanager.address</name>
<value>0.0.0.0:8034</value>
</property>
<property>
<name>yarn.nodemanager.aux-services</name>
<value>mapreduce_shuffle</value>
</property>
<property>
<name>yarn.nodemanager.local-dirs</name>
<value>$_PKG_INST_ROOT/$_PKG_INST_HADOOP_TMP/nm-local-dir</value>
</property>
<property>
<name>yarn.nodemanager.log-dirs</name>
<value>$_PKG_INST_ROOT/$_PKG_INST_HADOOP_TMP/userlogs</value>
</property>
</configuration>
EOF

}

setup_post_tune_service(){

	#$SETCOLOR_WARNING ; echo "Setup CLZ-BD service files on $_HD_NAME_MASTER:" ; $SETCOLOR_NORMAL;
	$SETCOLOR_WARNING ; echo "Setup post-tune service files :" ; $SETCOLOR_NORMAL;
	#ln -sf ./files/clz-bd.ser ${_PKG_INST_ROOT}/${_CLZ2BD_PNAME}/clz-bd.ser
	chown -R ${_HD_USER}.${_HD_GROUP} ${_PKG_INST_ROOT}/${_CLZ2BD_PNAME}

	if [ ! -f "/etc/rc.local" ] ; then 
		$SETCOLOR_FAILURE ; echo "No /etc/rc.local ?" ; $SETCOLOR_NORMAL ;
		exit 1;
	fi
	cp /etc/rc.local /etc/rc.local.clz-bd.bak
	sed -i -e "s/^exit/#exit/g" /etc/rc.local

	# insert port-tune 
	cat >> /etc/rc.local <<EOF
# Add by CLZ-BD.setup_post_tune_service module
${_PKG_INST_ROOT}/${_CLZ2BD_PNAME}/sbin/clz-bd.ser --post-tune
exit 0

EOF
	
}
uninstall_clz-bd(){
	# kill relative processs first
	for pid in `ps  -u $_HD_USER | grep -E '^[[:digit:]]+' | awk '{print $1}'` ; do
		kill -9 $pid
	done

	userdel -r $_HD_USER
	groupdel $HD_GROUP

	echo "Remove PKG:"
	if [ -n "$(echo $_PKG_JAVA | grep 'openjdk' 2>/dev/null)" ] ; then 
		if [ "$OS_Type" = 'DEB' ] ; then
			apt-get purge -y $_PKG_JAVA
			apt-get autoremove
		elif [ "$OS_Type" = 'RH' ]; then
			yum remove -y $_PKG_JAVA
		fi
	fi

	echo "Remove folder $_PKG_INST_ROO : "
	[ -d "$_PKG_INST_ROO/$_PKG_INST_JAVA_DIR" ] && ($SETCOLOR_WARNING ; echo -n "$_PKG_INST_JAVA_DIR ... " ;$SETCOLOR_NORMAL; ) && rm -rf $_PKG_INST_ROO/$_PKG_INST_JAVA_DIR
	[ -d "$_PKG_INST_ROO/$_PKG_INST_HADOOP_DIR" ] && ($SETCOLOR_WARNING ; echo -n "$_PKG_INST_HADOOP_DIR ... " ;$SETCOLOR_NORMAL; ) && rm -rf $_PKG_INST_ROO/$_PKG_INST_HADOOP_DIR
	[ -d "$_PKG_INST_ROO/$_PKG_INST_HADOOP_TMP" ] && ($SETCOLOR_WARNING ; echo -n "$_PKG_INST_HADOOP_TMP ... " ;$SETCOLOR_NORMAL; ) && rm -rf $_PKG_INST_ROO/$_PKG_INST_HADOOP_TMP

	echo "Backup to ${_CLZ2BD_PNAME} -> $_CLZ2BD_PNAME}.bak"
	mv $_CLZ2BD_DEFAULT_ROOT ${_CLZ2BD_DEFAULT_ROOT}.bak

}



